G = (V,E)
    V, Nodes (Vertices)
    E, unorderd pair of vertices (edge)
    |V| = # of nodes, (order of a graph, n)
    |E|, # of edges (size of a graph,m)
    degree (valency) = # of edges incident to it
    max degree of each vertext is
        = n-1, max = n(n-1)/2
        = n+1 if loops are allowed, b/c loop contributes 2 to the degree, n(n+1)/2
        = maximum num


x[x] => x[x]
i = degree of sybling,parent,child

x_0,n     => x [0,0]

x_2,n     => x [2,0]
x_i*2,n   => x [i*2,0]

x_1,n+1      => x [1,1]
x_i,n+1      => x [(i*2+1),1]

x_1,n-1      => x [1,-1]
x_i,n-1      => x [(i*2+1),-1]

x_1,n-m      => x [1,-m]
x_i,n-m      => x [(i*2+m),-m]
i i*2 i*2+1 
0 0 1 2 3
1 2 3 4 5
2 4 5 6 7
3 6 7 8 9

 0  1  2  3   3 2 1 0
            0
-1                  1
-2          0       2 
-3 -1             1 3
-4 -2       0     2 4
-5 -3 -1        1 3 5
-6 -4 -2    0   2 4 6
-7 -5 -3 -1   1 3 5 7

x[x] => x[x]
  x_i,(-i)-1   => y [i*2+m,-1], where m,i =[[0,inf,1,],[0,inf,1]]

x[y]  => x[y], where y[]
  x_n,i*2, where m = 0 for i = 0,1,2

x[y]      => y[]
  x_i,(-i)-1   => y [i*2+m,-1], where m = 1, i = 0,1


x[y]      => x[y], where y[z], z[]
  x_i,(-i)-1   => y [i*2+m,-1], where m = 0, i = 0,1,2,3

x[y]      => y[z], where z[]
  x_i,(-i)-1   => y [i*2+m,-1], where m = 1 i = 0,1,2

x[y]      => x[y],    where y[z,b], z[b], b[]
  x_i,(-i)-1   => y [i*2+m,-1], where m = 1 i = 0,1,2

x[y]      => y[z,b],    where z[b], b[]

  All Binary Trees
    where m = 1 for i = 0

  Binary Tree for x.y.z...
    where m = 1 for i = 1,2,3
    where m = 2 for i = 1,2

  Binary Tree for x.y.b...
    where m = 1 for i = 1,2
    where m = 0 for i = 2,3

  All Binary Trees
    where m = 0 for i = 0,1

  1st Binary Tree for
    where m = 0 for i = 2,3
    where m = 1 for i = 2,4

  Binary Tree for x.y.b...
    where m = -1 for i = 2,3
    where m = 0 for i = 2,3,4


x
  y
    =
    z
      -y
      b
        =
        -y
        _
        -z
          -y
        !=
          r
            -b
              =
              -y
              _
              -z
                  -y
              !=
        !=
    _
    b
      =
      -y
      _
      -z
        -y
      !=
      r
        -b
          =
          -y
          _
          -z
            -y
          !=
      !=

x
  y
    =
    z
  y
      b
    y
    z
  y
        r
      b
    y
    z
  y
    _
    b
  y
  z
y
      r
    b
  y
  z
y
    !=


x
  x
x
    x
  x
x
      r
    x
  x
x

x_i,(-i)-1   => y [i*2+m,-1], where m = 1, i = 0
# sql ###############
  column  (c)
  use     (u)
    uniq  (uuniq)
          0;0
          0;1
          0;i
  table   (t)
    scope (tscope)
    uniq  (tuniq)
        0;0
        0;i -> key

# db ###############
ntbls
  nname
    {nname}
      tbl
      atbls
      ptbls
      utbls
atbls
  aname
    {aname}
      tbl
      atbls
      ptbls
      utbls
ptbls
  pname
    {pname}
      tbl
      atbls
      ptbls
      utbls
utbls
    [
      {
         used_tbls: [] 
      }
    ]