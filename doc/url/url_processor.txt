[qsudo code]

[Assumptions]
- arrays are finite number on bp side
- arrays can be only created on ar side
- all subarrays require 2 or more items
- all sub arrays require one fixed item
- only scalar items can be in try blocks
[contitions]
# PRE LOOP CHECKS

# Virtual Checks
vidx >= len(v_ar)
    len(v_bp) > len(v_ar)
    len(v_bp) < len(v_ar)
vidx >= len(v_bp)
    len(v_bp) > len(v_ar)
    len(v_bp) < len(v_ar)

    bsais  = [idx for idx,i in enumerate(bp['c']) if isinstance(item,list)]
    vsais  = [idx for idx,i in enumerate(ar['c']) if isinstance(item,list)]
    v_ar_e = vsais[0]
    v_bp_e = bsais[0]
    v_z    = start_idx + 1
    v_bp_len = v_bp_e - v_z
    v_ar_len = v_ar_e - v_z


# TYPE CHECK
type(item) != type(bp_item)
    isinstance(item,list) == True and isinstance(bp_item,list) == False 
        [[backtrack
    isinstance(item,list) == False and isinstance(bp_item,list) == True 
        [[item = [item]
    
# MATCHING CHECKS
item != bp_item
    [[backtrack
    
# PER LOOP CHECKS
- num_bp_arrays_left 
- bp overshoot

# LVL DECEND CHECKS
  - r_e <= idx
  -? on fail return item back to scalar

# LVL ACEND CHECKS

# AR EXAUATION
idx >= len(c_ar)
    len(c_bp) > len(c_ar)
        "trailing t"
            [[pop next t
            [[True
        else:
            [[break
    len(c_bp) < len(c_ar)
        [[backtrack

# BP EXAUATION
idx >= len(c_bp)
    len(c_bp) > len(c_ar)
        [[break
    len(c_bp) < len(c_ar)
        [[backtrack

# backtrack Checks
r_e <= idx
r_e > idx


    plh = bp['c'].pop(idx)
    r = {
      'e':    idx,
      'z0':   idx,
      'val':  args[0],
      'plh':  plh, }
    ra.append(r)

[((x))...] [((x>>...] [...<<x>>...] [...<<x))] [...((x))]
[(())]

bp c_bp v_bp bp_item
ar c_ar v_ar item 
ida idx  idv

[ar]
- *_z = 0
- *_e       = *_len 
- *_e -1    = *_q
- -1        = *_p
ar, *_z = 0
ar_0      + ar_1      + ... + ar_n      = ar
ar_0_len  + ar_1_len  + ... + ar_n_len  = ar_len
ar_0_e    + ar_1_e    + ... + ar_n_e    = ar_e
ar_0_q    + ar_1_q    + ... + ar_n_q    = ar_q - (n-1)

[sub_ar]
- *_e - *_z = *_len
- *_e -1    = *_q  
- *_z -1    = *_p  
- sub_ar_len = 0 <= sub_ar_e - sub_ar_e <=  ar_len 
- sub_ar_z_n+1 = sub_ar_e_n
||sub_ar_n = sub_ar
||sub_ar_n_len = sub_ar_len
||sub_ar_e_n - sub_ar_z_n = sub_ar_len
||sub_ar_e_n + (sub_ar_e_n - sub_ar_z_n+1) - sub_ar_z_0 = sub_ar_len
||sub_ar_e_n = sub_ar_len + sub_ar_z_0 
 


