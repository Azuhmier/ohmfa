############################################
# Types
whitespace
    newline
    non-newline
        leading
        trailing
        in-line
token
  regular
  container
      bicontainer
          bracket
          EOL terminating
      delim

############################################

###########################################
init
UpdateLineBuffer, EOF, EOL, heaaders = getToken()
  __getToken(EOF, EOL, headers, POS, uid)
    postMatch
        disable/enable tokens
        give?
        overmatch
        fill token
        f_c

    Tryanothertoken
        ed_optnl
        try chidl
        try sybling
        try whitspace
        eol?
        error

getToken()

BOF
BOL
NOM
EOL
EOF

__getToken()

match
no match
whitespace
EOL

TryAnotherToken()






###################################
# LEXER
###################################


self.DefaultTokenStates
self.re_newline
self.re_whitespace
self.re_NonNewline_whitespace
self.f_VerboseEnabled
self.txt

self.z_txt
self.LineBuffer
self.z_line
self.SizeOfLineBuffer
self.TokenNumber
self.LineNumber
self.f_EOF
self.f_EOL

self.TokenHistory
self.headers

self.TokenStates
self.token





###################################
# TOKEN State/Config/Definition
###################################

KEY        DataType            State
------------------------------------------------------------------------------------------
uid        uid                 static     get_token
enabled    Bool                dynamic    __get_token
pat1       compiled_regex      static     __get_token
pat2       compiled_regex      static     __get_token
f_eolt     Bool                static     __get_token
f_c        Bool                dynamic    __get_token
f_give     Bool                static     post match
cnt        [ int, int, int ]   dynamic    post match
max        [ int, int, int ]   static     post match
sc         [,uid]              static     post match
sc_en      Bool                static     post match
ed_dsbl    [,uid]              static     post match
ed_enbl    [,uid]              static     post match
name       str                 static     post match
ed_optnl   Bool                static     no match

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

uid
    indicatd level and heiarchy of token, only bicontainers and delims can have token children

pat1
    Compiled Regex or None
pat2
    Compiled Regex or None, Only Bicontainers and delims are concerned with pat2

f_eolt
    - False
    True
    - automatically matches an empty line buffer when self.f_EOL is True | bicontainer with f_c is True


f_c
    False
    - use pattern 1    | bicontainer & delim
    - append to header | bicontainer
    True
    - use pattern 2
    - reset to token states of children to default  | bicontainer & delim
    - pop from header  | bicontainer
    - trychild         | bicontainer & delim

f_give
    False
    - update linebuffer
    True
    - do not update linebuffer

enabled
    False
    - go straight to no match in __getToken()
    True
    - attempt to match

cnt
    try to increment when
    - bicontainer f_c i true in post match
    - regular and delim      in post match
max
    set enabled to false when max[i] == cnt[i]

sc_en
    False
    - Notheringj
    True
    - disable all uids in 'sc' that are not equal to the current uid in post match
sc
    list of uids

ed_dsbl
    - disable all uids in ed_dsbl in post match
ed_enbl
    - enable all uids in ed_dsbl in post match
ed_optnl
    - disable and enable all the uids in ed_dsbl and ed_enbl in no match

name
    irrelevant for now, doesn't effect the validity of the tokens returned



###################################
# TOKEN
###################################

uid          | All values correspond to either just the token or their
match        |  corresponding self.* at the time of post match
z_txt        |
z_line       |
e_line       |
LineNumber   |

EOF
    Tells Parser that or caller subroutine that this is the last token and to not ask for more
name
    irrelevant for now
type
    irrelevant for now


###################################
# TOKEN DEFITIONS TYPES
###################################
* '-' means the value is dynamic for that type
pat1 pat2  Token Dedfintion Type
--------------------------------
1    0     member
0    1     mono-container
1    1     bi-container

###################################
# TOKEN TYPES
###################################
Token Defintion Type       Type
----------------------------------
member                     regular
mono-container             delim
bi-confainter(f_c = False) start
bi-confainter(f_c = True)  end

###################################
# Line Buffer
###################################
* '▀' represents a newline

LINEBUFFER     LINEBUFFER with the skipped newlines
---------------------------------------------------
0123456789 ||| 0123456789
 orem is   |1|  orem iu▀
sit amt,   |2| sit amt,▀
con et     |3| con et▀
 ic ig.    |4|  ic ig.▀


TXT or FILE
0123456789111111111122222222223333
          012345678901234567890123
 orem is▀sit amt,▀con et▀ ic ig.▀


EOL
- self.z_line = self.SizeOfBuffer
- update line buffer
- set EOL flag
- '[^$]' matches here, only token aloud to match an empty string, wich will be changed to new line in the post match
- if no match reset uid to head

EOF
- returns EOF token

newline and space token




pat1 pat2 f_eolt
1    0    0
0    1    0
1    1    0
1    0    1

pat1 pat2
1    0
0    1
1    1
1    0    1

1    0
0    1
1    1*



#switch case#
sc
sc_en

apple, date, fig
apple; date; fig

#ed
ed
ed_dsbl
ed_enbl

f_c
f_eolt
f_giv


child->sybling->whitespace->EOL->ERROR
