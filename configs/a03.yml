sld:      archiveofourown
site_key: a03
dmns:
    d:
        hstns:    ['', www]
        hstn_var: null
        tlds:     [org]
site_defs:
    chapter: part
    psued:   alias
nodes:
    site:
        urls:
            login:
                bps: 
                    main:
                        bp: [d, users, login]
                        main: True
                        domain_type: d
                        query: {}
                        frags: {}
                formats: {}
                regex: {}
                payload: 
                    user[login]: _usr_ 
                    user[password]: _pwd_
                    user[remeber_me]: 0 
                    commit: "Log+in" 
                    authenticity_token: g_token_value
    user:
        urls:
            user:
                bps: 
                    main:
                        bp: [users, _db(;name)_, _try(pseuds;_db(;alias)_|1|0)]
                        main: true
                        domain_type: d
                        query: {}
                        frags: {}
                regex: {}
                format: {}
                actions: 
                    init:
                        do:
                        - [ a_init]
                    content:
                        do:
                        - []
                    crawl:
                        - profile
                        - series_listing
                        - work_listing
            profile:
                bps:
                    main: 
                        bp: [users, _db(;name)_, profile]
                        main: True
                        domain_type: d
                        query: {}
                        frags: {}
                formats: {}
                regex: {}
                actions:
                    init:
                        do:
                        - [ a_init]
                    content:
                        do:
                        - []
                    crawl: null
                elements: 
                    e_pseudes: [_css(".meta"),      [_css("dd.pseuds"),       [_for(), a,                        _db(pseuds)_       =text]]]
                    e_joined:  [_css(".meta"),      [_css("dd:nth-child(4)"),                                    _db(stat|joined)_  =text]]
                    e_uid:     [_css(".meta"),      [_css("dd:nth-child(6)"),                                    _db(;uid)_         =text]]
                    e_works:   [_css("#dashboard"), [_css("ul.navigation"),   [        _css("nth-child(1)"),[a, _db(stat|works)_    =text)]]]]
                    e_series:  [_css("#dashboard"), [_css("ul.navigation"),   [        _css("nth-child(1)"),[a, _db(stat|series)_   =text)]]]]
                    e_faves:   [_css("#dashboard"), [_css("ul.navigation"),   [        _css("nth-child(1)"),[a, _db(stat|faves)_    =text)]]]]
            work_listing:
                bps:
                    main: 
                        bp: [users, _db(;name)_, _try(pseuds;_db(|;alias)_|1|0), works]
                        main: True
                        domain_type: d
                        query:
                            page: _db(page;;1)_
                        frags: {}
                formats: {}
                regex: 
                    title: “^Works - [^,-]+ - \\[Archive of Our Own\\]$”
                actions: 
                    checks:
                        title:
                        - [ _in(ea_head), title, text==_regex(title) ]   
                        - true 
                    data:
                        self:
                            prsv: null
                            area: {}
                            key_order: []
                            data:
                                NAME: [ _css(“h2.heading”), db(;name)=text, _sfind(“by “;>) ]
                                WORK:
                                    prsv: "|work"
                                    area:
                                        listing: [ _css(“ol.work.index.group”), [ _for(),li ]]
                                        listing_head: [ _in(listing), _css(”h4.heading”) ]
                                    key_order: []
                                    data:
                                        uid:  [ _in(listing_head), _for(0), a, _db(|w)=href, _upath(-1) ]
                                        name: [ _in(listing_head), _for(0), a, _db(|w;name)=text ]
                                        dscp: [ _css(“bockquote.userstuff.summary”), _db(|work|dscp)=text, _format(dscp) ]
                                        stats:
                                            prsv: "|work|stats"
                                            area: {}
                                            data:
                                                most:
                                                    ref:  "work.work.stats"
                                                    filter: [_not(), published, updated]
                                                    subs: null
                                                published:    [ _css(“p.datetime”), _db(|work|stats:published)=text, _format(datetime,”dd mmm yyyy”) ]
                                                complete: [ _css(“ul.required-tags”), [ _for(-1),  span, class!=”text”, _db(|w|stats:complete)=class, _wfind(“-“;>,1), _format(bool,”yes”,”no”) ]]
                                        tag:
                                            prsv: null
                                            area: {}
                                            data:
                                                TAG_LANG:
                                                    ref: work.work.tag.tag.tag_lang 
                                                    filter: null
                                                    subs: null
                                                tag:          [ _css(ul.tags.commas), [ _for(), dd, class==_substr(“tags”), _db(work|*tag|group)=class, _sfind(“ tags”,<), [ _for(), a, class==”tag”, _db(work|tag)=text, _format(tag) ]]]
                                                tag_fandom:   [ _css(“h5.fandom.heading”), [ _for(),  a, _db(|work|*tag|group)=”fandom”, _db(|work|tag)=text ]]
                                                tag_req:      [ _css(“ul.required-tags”), [ _for(:-1), span, class!=”text”, _db(|w|*t|g)=class, _sfind(“-“;<,1), [ span, _db(|w|@t)_=text, _split(“,”,def) ]]]
                                        USER:
                                            prsv: "@user"
                                            area: {}
                                            data:
                                                uid:   [ _in(listing), _db(|work|@user)=class, _wfind(“user-“;>) ]
                                                name:  [ _in(listing_head), _for(1:), a, _db(|work|user;name)=href, _upath(1) ]
                                                alias: [ _in(listing_head), _for(1:), a, _db(|work|user;%alias)=text, ifind(“(“,”)”), _else(), _dbcv(|work|user;name) ]
                                        bin:
                                            prsv: "|work|bin"
                                            area:
                                                series: [ _css(“ul.series”), [ _for(), li ]]
                                            data:
                                                uid:  [ _in(series), a, _db(|work|bin)=href, _upath(-1) ]
                                                name: [ _in(series), a, _db(|work|bin;name)=text ]
                                                idx:  [ _in(series), strong, _db(|work;idx)=text ]
                                                user:
                                                    ref: work.work.bin.user
                                                    filter: null
                                                    subs: null
                    content:
                    crawl:
            bin_listing:
                bps:
                    main: 
                        bp: [users, _db(;uid)_, _try(pseuds;_db(|;alias)_|1|0), series]
                        main: true
                        domain_type: d
                        query:
                            page: _db(page;;1)_
                        frags: {}
                formats: {}
                regex:
                    title: "^(?:[^,-]+,? )+-Works \\[Archive of Our Own\\]$"
                actions: 
                    checks:
                        title:
                            - [_in(ea_head), title, text==_regex(title)]
                            - TRUE 
                    data:
                        self:
                            prsv: null
                            area: {}
                            data:
                                name: [_css(“h2.heading”), db(;name)=text,_sfind(“by “;>)]
                                bin:
                                    prsv: "|bin"
                                    area:
                                        listing: [_css(“ul.seriew.index.group”), [_for(), li]]
                                        listing_head: 
                                            ref: user.work_listing.work.area.listing.head
                                            fitler: []
                                            subs: []
                                    data:
                                        uid:
                                            ref: user.work_listing.work.uid(work=bin)
                                            fitler: []
                                            subs:
                                                - [work,bin]
                                        name:
                                            ref: user.work_listing.work.name(work=bin)
                                            filter: []
                                            subs:
                                                - [work,bin]
                                        stats: 
                                            ref: user.work_list.work.stats[bookmarks,words,complete,published](work=bin)
                                            filter: [bookmarks, words, complete, published]
                                            subs:
                                                - [work,bin]
                                        tag:
                                            ref: user.work_listing.work.tag(work=bin)
                                            filter: []
                                            subs:
                                                - [work,bin]
                                        dscp:
                                            ref: user.work_listing.work.dscp(work=bin)
                                            filter: []
                                            subs:
                                                - [work,bin]
                                        user: 
                                            ref: user.work_listing.work.user(work=bin)
                                            filter: []
                                            subs:
                                                - [work,bin]


                    content:
                    crawl:
                elements: 
                    e_listing: [ul, class=series index group, [_for(|series), li]]
    bin:
        urls:
            work_listing:
                bps:
                    main:   
                        bp: [series, _db(;uid)_]
                        main: True
                        domain_type: d
                        query:
                            page: _db(page;;1)_
                        frags: {}
                formats: {}
                regex:
                    title: “^[^,-]+- (?:[^,-]+,? )+- (?:[^,-]+,? )+\[Archive of Our Own\]$”
                actions:
                    check:
                        title:
                            - [_in(ea_head), title, text==_regex(“”)]
                            - true
                        series:
                            - [_css(“dl.series.meta.group”)]
                            - true
                    data:
                    self:
                        prsv: null
                        area: {}
                        data:
                            NAME: [_css(“h2.heading”), db(;name)=text]
                            STATS:
                                prsv: "|stats"
                                area: null
                                data:
                                    most: 
                                        ref: USER.WORK_LIST.WORK.STATS
                                        filter: [bookmarks, workds, complete]
                                        subs: 
                                            - [work,bin]
                                    PUBLISHED: [_css(“dl.series.meta.group”),[_for(1), dd, _db(|stat:published)=text, _format(datetime,(yyyy-mm,dd”)]]
                                    UPDATED: [_css(“dl.series.meta.group”),[_for(2), dd, _db(|stat:updated)=text, _format(datetime,(yyyy-mm,dd”)]]
                            USER:
                                prsv: null
                                area: {}
                                data:
                                    NAME: [_css(“dl.series.meta.group”),[_for(0), dd, [_for(), a _db(|user;name)=href, _upath(1)]]]
                                    ALIAS: [_css(“dl.series.meta.group”),[_for(0), dd, [_for(), a _db(|user;%alias)=href, _upath(-1)]]]
                            WORK:
                                prsv: "|work"
                                AREA:
                                    Listing: [_css(“ul.series.work.index.group”), [_for(), li]]
                                    Listing_head:
                                        ref: USER.WORK_LISTING.WORK.AREA.LISTING.HEAD
                                        filter: []
                                        subs: []
                                data:

                            UID: 
                                ref: USER.WORK_LISTING.WORK.UID
                                filter: []
                                subs: []
                            NAME:
                                ref: USER.WORK_LISTING.WORK.NAME
                                filter: []
                                subs: []
                            STATS: 
                                ref: USER.WORK_LISTING.WORK.STATS
                                filter: []
                                subs: []
                            DSCP:
                                ref: USER.WORK_LISTING.WORK.DSCP
                                filter: []
                                subs: []
                            TAG :
                                ref: USER.WORK_LISTING.WORK.TAG
                                filter: []
                                subs: []
                            USER :
                                ref: USER.WORK_LISTING.WORK.USER
                                filter: []
                                subs: []
                            BIN:
                                ref: USER.WORK_LISTING.WORK.BIN
                                filter: []
                                subs: []

                    content:
                    crawl:
                elements: 
                    e_user:                   [_css("dl.series > dd:nth-child(2)"),             [_for(), a, _db(|user;name)_     =hreff, _upath(1)]]
                    e_stat_created:           [_css("dl.series > dd:nth-child(4)"),                         _db(|stat:created)_  =text]
                    e_stat_updated:           [_css("dl.series > dd:nth-child(6)"),                         _db(|stat:updated)_  =text]
                    e_stat_words:             [_css("dd.words"),                                            _db(|stat:words)_    =text]
                    e_stat_works:             [_css("dd.works"),                                            _db(|stat:works)_    =text]
                    e_stat_complete:          [_css("dl.stats:nth-child(1) > dd:nth-child(6)"),             _db(|stat:complete)_ =text]
                    e_stat_faves:             [_css("dd.bookmarks"),                                        _db(|stat:faves)_    =text]
                    e_listing:                [ul, class==series work index group, [_for(|work), li]]
    work:
        urls:
            work:
                bps:
                    main: 
                        bp: [works, _db(;uid)_]
                        main: True
                        domain_type: d
                        query: 
                            show_comments: true
                            view_adult: true
                            view_full_work: true
                        frags: {}
                formats:
                    dscp:
                regex:
                    title: "^[^,-]+- (?:[^,-]+,? )+- (?:[^,-]+,? )+\\[Archive of Our Own\\]$"
                actions:
                    checks:
                        title: 
                        - [ _in(ea_head), title, text==_regex(title) ]
                        - true
                        not_series:
                        - [ _css(“dl.series.meta.group”) ]
                        - false
                    parse:
                        _SELF:
                            prsv: null
                            area: {}
                            key_order: []
                            data:
                                UID:  [ _css(“li.chapter.bychapter”), [ a, _db()=href, _upath(1) ]]
                                NAME: [ _css(“h2.title.heading”), _db(;name)=text ]
                                DSCP: [ _css(“div.summary.module”), [ blockquote, _db(;dscp)=text, _format(dscp) ]]
                                _STATS:
                                    prsv: "|stats"
                                    area: {}
                                    key_order: []
                                    data:
                                        PUBLISHED: [ _css(“dd.published”), _db(;stat:published)=text, _format(datetime|”yyyy-mm-dd”) ]
                                        UPDATED:   [ _css(“dd.updated”), _db(;stat:updated)=text, _format(datetime|”yyyy-mm-dd”) ]
                                        WORDS:     [ _css(“dd.words”), _db(;stat:words)=text, _format(int|”,”) ]
                                        FAVES:     [ _css(“dd.bookmarks”), _db(;stat:faves)=text, _format(int|”,”) ]
                                        LIKES:     [ _css(“dd.kudos”), _db(;stat:likes)=text, _format(int|”,”) ]
                                        VIEWS:     [ _css(“dd.hits”) , _db(;stat:faves)=text, _format(int|”,”) ]
                                        COMMENTS:  [ _css(”dd.comments”) , _db(;stat:faves)=text, _format(int|”,”) ]
                                        COMPLETE:  [ _css(“dd.chapters”), _db(;stat:completed)=text, _esplit(“/”;0;1) ]
                                _TAG:
                                    prsv: null
                                    area: {}
                                    key_order: [tag, tag_lang]
                                    data:
                                        TAG:      [ _css(dl.work.meta.group), [ _for(), dd, class==_substr(“tags”), _db(|*tag|group)=class, _sfind(“ tags”,<), [ _for(), a, class==”tag”, _db(|tag)=text, _format(tag) ]]]
                                        TAG_LANG: [ _prsv(|tag), _css(“dd.language”), _db(|tag;alias)=lang, _db(|tag)=text]
                                _USER:
                                    prsv: null
                                    area: {}
                                    key_order: []
                                    data:
                                        NAME: [ _css(“h3.byline”), [ _for(), a, _db(|user;name)=href, _upath(1) ]] 
                                _BIN: 
                                    prsv: "|bin"
                                    area:
                                        series: [ _css(“dd.series”), [ _for(), span ]]
                                    key_order: []
                                    data:
                                        UID:  [ _in(series), _css(“span.position”), [ a, _db(|bin)=href, _upath(-1), _db(|bin;name)=text ]]
                                        NAME: [ _in(series), _css(“span.position”), [ a,_db(|bin;name)=text ]]
                                        IDX:  [ _in(series), _css(“span.position”), _db(;idx)=nrtext, _ifind("Part ";" of") ]
                                        _USER: 
                                            prsv: 
                                            area: {}
                                            key_order: []
                                            data:
                                                NAME: [_eval(), _db(|bin|@user)=_dbc(|@user)]
                                _PART:
                                    prsv: "|part"
                                    area:
                                        chapters: [ _css(“div#chapters”), [ _for(), div, class==”chapter”]]
                                    key_order: []
                                    data:
                                        UID: [ _in(chapters), _css(“h3.title”), [ a, _db(|part)=href, _upath(-1) ]]
                                        VAL: [ _in(chapters), _css(“h3.title”), _db(|part;name)=nrtext, "_sfind(“: “; >)" ]
                                        IDX: [ _in(chapters), _css(“h3.title”), [ a, _db(|part;idx)=text, _sfind(“Chapter “;>) ]]
                                        _USER:
                                            prsv: "|part|@user"
                                            area: {}
                                            key_order: []
                                            data:
                                                NAME:  [ _css(“h4.heading.byline), [ _for(), a, _db(|part|user;name)=href, _upath(1) ]]
                                                ALIAS: [ _css(“h4.heading.byline), [ _for(), a, _db(|part|user;%alias)=href, _upath(-1) ]]
                                                ELSE:  [ _db(|bin|@user%)=_db(|@user%) ]



                content:
                    - [_css("div.userstuff"), _db()=text]
                    - [_css("div.userstuff.module"), _db()=text]
                crawl: {}
    chapter:
        urls:
            chapter:
                bps:
                    main:
                        bp: [works, _db(|work;uid)_, chapters, _db(;uid)_]
                        main: true
                        domain_type: d
                        query: 
                            show_comments: true
                            view_adult: true
                        frags: {}
                regex:
                    title: "^[^,-]+  -  Chapter [^,-]+ - (?:[^,-]+,? )+ - (?:[^,-]+,? )+\\[Archive of Our Own\\]$"
                actions:
                    checks:
                        title:
                            - [_in(ea_head), title, text==_regex(title)]
                            - true
                    data:
                        self:
                            params:
                                prsv: null
                                area: 
                                    chapters: [ _css(“#chapters”), [ _for(), div, class==”chapter”]]
                            data:
                                most: 
                                    ref: work.work.chapter
                                    fitler: []
                                    subs: []

                                work: 
                                    prsv: "|work"
                                    area: {}
                                    data:
                                        most:
                                            ref: work.work
                                            filter: []
                                            subs: []
                                        parts:
                                            prsv: "|work|part"
                                            area:
                                                chapters: [_css("li.chapter"), [_css("select#selected_id"), [_for(), option, _noexists("selected")]]]
                                            data:
                                                uid: [_in(chapters), _db(|work|part)=value]
                                                idx: [_in(chapters), _db(|work|part;name)=text, _sfind(". ";>)]
                                                idx: [_in(chapters), _db(|work|part;idx)=text, _sfind(".";<)]
                    content:
                    crawl:
actions:
    init:
    - [ _name(tos), e_tos, _exists]
    - [ _no_soup, _skipif(!tos), e_tos_agree,  _click(1)]
    - [ _no_soup, _skipif(!tos), e_tos_agree2, _click(1)]
    - [ _no_soup, _skipif(!tos), e_tos_accept, _click(1)]
    listing_init:
    - []
    content_init:
    - [_wait(2), e_dl, _exists]
    - [e_author, _exists]
    dl_content:
    - [_no_soup, e_dl, _click(1), _wait(1)]
    - [_no_soup, e_dl_pdf, _click(1), _wait(1)]
elements:
    #####################################################
    ### GLOBAL #########################################
    # -------- tos
    ea_tos : [body, [div, id==tos_prompt]]
    ec_tos_accept: [_css("#accept_tos")           ]
    ec_tos_agree:  [_css("#tos_agree")            ]
    ec_tos_agree2: [_css("#data_processing_agree")]


    #####################################################
    ### CONTENT #########################################
    #-----------navigation
    ec_chapter_index:    [_css("a.collapsed"),text=="Chapter Index"] 
    e_chapter_id:        [_in(ec_chapter_index), [select, id==selected_id, [        option, _exists(selected),  _db(|part;idx)_  =text, _slice(0:1), _db(|part;uid)=value]]]
    e_other_chapters_id: [_in(ec_chapter_index), [select, id==select_id,   [_for(), option, _exists(!selected), _db(|part;idx)_  =text, _slice(0:1), _db(|part;uid)=value]]]

    ec_dl:      [_css(".download"), a                      ]
    ec_dl2:     [_css(".download"),   [ul, [_for(), li, _scrape(content;type)_=text, _scrape(content;url)_href]]]

    #----------- meta
    ea_series:             [_css("dd.series"), [ span, class=="position"]]
    e_series_uname:        [_in(ea_series),          a, _db(|series;name)_   =text, _db(|series;uid)=href, _upath(-1)]
    e_series_idx:          [_in(ea_series),  _not(), a, _db(;idx)_           =text, _slice(5:;:-3)                   ]

    e_usrer_uname:         [_css("h3.byline"), [_for(), a, _db(|user;name)_ =text, _db(|user;uid)=href,_upath(1)_]]
    e_work_name:           [_css("h2.title"),              _db(|work;name)_ =text]
    e_work_dscp:           [_css(".summary"),  [_for(), p, _db(|dscp;val)_  =text]]

    # - tags
    e_rating:     [_css("dd.rating"),       _db(tag;>|*|group)_ =class, [_for(), li, [a, _db(tag;+)_=text]]]
    e_warning:    [_css("dd.warning"),      _db(tag;>|*|group)_ =class, [_for(), li, [a, _db(tag;+)_=text]]]
    e_category:   [_css("dd.category"),     _db(tag;>|*|group)_ =class, [_for(), li, [a, _db(tag;+)_=text]]]
    e_fandom:     [_css("dd.fandom"),       _db(tag;>|*|group)_ =class, [_for(), li, [a, _db(tag;+)_=text]]]
    e_rel:        [_css("dd.relationship"), _db(tag;>|*|group)_ =class, [_for(), li, [a, _db(tag;+)_=text]]]
    e_character:  [_css("dd.character"),    _db(tag;>|*|group)_ =class, [_for(), li, [a, _db(tag;+)_=text]]]
    e_freeform:   [_css("dd.freeform"),     _db(tag;>|*|group)_ =class, [_for(), li, [a, _db(tag;+)_=text]]]
    e_lang:       [_css("dd.language"),     _db(tag;>|*|group)_ =class,                  _db(tag;+)_=text]

    # - stats
    e_pub:        [_css("dd.published"),    _db(stat;created)_  =text]
    e_status:     [_css("dd.status"),       _db(stat;updated)_  =text]
    e_words:      [_css("dd.words"),        _db(stat;words)_    =text]
    e_comments:   [_css("dd.comments"),     _db(stat;comments)_ =text]
    e_kudos:      [_css("dd.kudos"),        _db(stat;likes)_    =text]
    e_hits:       [_css("dd.hits"),         _db(stat;views)_    =text]
    e_bookmarks:  [_css("dd.bookmarks"),[a, _db(stat;faves)_    =text]]

    #-----------Chapter
    e_chapters:            [_css("'#chapters'"),[_for(chapter), div, class==chapter]]

    e_chapter_head:        [_in(e_chapters), div, class=="chapter preface group"]
    e_chapter_dscp:        [_in(e_chapter_head),         div, id=="summary", [_for(), p, _db(|dscp)_ +=text            ]]
    e_chapter_idx:         [_in(e_chapter_head),         a,                              _db(;idx)_   =text, _slice(8:)]
    e_chapter_name:        [_in(e_chapter_head), _not(), a,                              _db(;name)_  =text, _slice(2:)]
    e_chapter_uid:         [_in(e_chapter_head),         a,                              _db(;uid)_   =href, _upath(-1)]


    e_chapter_body:        [_in(e_chapters), div, class=="userstuff module"]
    e_imgs:                [_in(e_chapter_body), [_for(), img, _db(|img)_  =src ]]
    e_chapter_body_text:   [_in(e_chapter_body), [_for(), p,   _db(|)_     =text]]


    #####################################################
    ### LISTINGS #########################################
    e_user_uid: [_in(e_listing), _db(|user;uid)_ =class, _wfind_all("user-";>) ]

    # ------------- head
    ea_head:         [_in(e_listing), [div, class=="header module"]]

    ea_head2:        [_in(ea_head), [h4]]
    e_user_name:     [_in(ea_head2),  [_for(1:), a, _db(|user;name)_  =href,  _upath(1)                    ]]
    e_listing_uname: [_in(ea_head2),  [_for(1),  a, _db(;uid)_        =href,  _upath(-1) _db(;name)_ =text ]]

    e_tags:          [_in(ea_head), [h5, [_for(), a, _db(|tag)_ =text, _db(|tag|group;name)_ ="Fandom" ]]]

    ea_tag2:         [_in(ea_head), ul, class =="required-tags"] 
    e_tags2:         [_in(ea_tags2), _for(), li,   [a, [span,  _db(|tag;name)_ =title, "_split(,)", _db(|tag|group;name)_ =class, _sfind(' -';<)]]] 

    e_stat_created:  [_in(ea_head), [p, _db(stat;created)_ =text, _type(datetime;dd mmm yyyy)]]

    # ------------- tags
    ea_tags3: [_in(ea_listing), ul, class =="tag commas"]
    e_tags3:  [_in(ea_tags3), _for(), li, _db(|tag|group)_ =class, [a, _db(|tag)_ =text, _sfind(" -";"<")]]

    # ------------- dscp
    e_dscp:          [_in(ea_listing), [blockquote, [_for(), p, _db(|dscp;val)_ +=text, _list()]]]

    # ------------- *series
    ea_series:      [_in(ea_listing), ul, class =="series", [li]]
    e_idx:          [_in(ea_series), strong, _db(;idx)=1]
    e_series_uname: [_in(ea_series), a, _db(|series;uid)=href, _upath(-1), _db(|series;name)_=text]

    # ------------- stats
    ea_stats:        [_in(ea_listing), dl]
    e_stat_words:    [_in(ea_stats), [_css("dd.words"),     _db(stat:words)_    =text]]
    e_stat_works:    [_in(ea_stats), [_css("dd.works"),     _db(stat:works)_    =text]]
    e_stat_faves:    [_in(ea_stats), [_css("dd.bookmarks"), _db(stat:faves)_    =text]]
    e_stat_hits:     [_in(ea_stats), [_css("dd.hits"),      _db(stat:views)_    =text]]
    e_stat_language: [_in(ea_stats), [_css("dd.language"),  _db(stat:lang)_     =text]]
    e_chapters:      [_in(ea_stats), [_css("dd.chapters"),  _db(stat:lang)_     =text]]
    e_comments:      [_in(ea_stats), [_css("dd.comments"),  _db(stat:comments)_ =text]]
    e_kudos:         [_in(ea_stats), [_css("dd.kudos"),     _db(stat:likes)_    =text]]

    # ------------- iter
    ec_next: [ol.pagination, [li, class=next, [a]]]


    #####################################################
    ### LOGIN #########################################
    et_user:       [_css("#user_login")                      ]
    ec_remeber_me: [_css("#user_remeber_me")                 ]
    et_password:   [_css("#user_password")                   ]
    ec_submit:     [_css("#input.submit")                    ]
    e_token:       [input, name==authenticity_token          ]
    e_csrf:        [meta,  name==csrf-token,content          ]